r"""*'Live data' test objects for* ``pent`` *test suite*.

``pent`` Extracts Numerical Text.

**Author**
    Brian Skinn (bskinn@alum.mit.edu)

**File Created**
    9 Oct 2018

**Copyright**
    \(c) Brian Skinn 2018

**Source Repository**
    http://www.github.com/bskinn/pent

**Documentation**
    http://pent.readthedocs.io

**License**
    The MIT License; see |license_txt|_ for full license terms

**Members**

*(none documented)*

"""

import re
import unittest as ut

from pent import ParserField

from .pent_base import SuperPent, testdir_path


class TestPentORCALiveData(ut.TestCase, SuperPent):
    """Confirming pattern matching of patterns generated by the Parser."""

    @classmethod
    def get_orca_cas_file(cls):
        """Return the sample ORCA CAS output."""
        return cls.get_file("Cu_CAS.out")

        # with (Path() / "pent" / "test" / "Cu_CAS.out").open() as f:
        #    return f.read()

    @classmethod
    def get_orca_opt_file(cls):
        """Return the sample ORCA optimization output."""
        return cls.get_file("MeCl2F_116.out")

        # with (Path() / "pent" / "test" / "MeCl2F_116.out").open() as f:
        #    return f.read()

    @classmethod
    def get_orca_trj(cls):
        """Return the sample .trj file."""
        return cls.get_file("MeCl2F_21.trj")

    def test_orca_hess_freq_parser(self):
        """Confirm 1-D data parser for ORCA freqs works."""
        import pent

        from .testdata import orca_hess_freqs

        head_pattern = ("@.$vibrational_frequencies", "#!.+i")
        body_pattern = "#.+i #!..f"

        # Trivial application of the tail, but serves to check that
        # it works correctly.
        tail_pattern = ("~", "@.$normal_modes", "#!++i")

        file_path = str(testdir_path / "C2F4_01.hess")

        freq_parser = pent.Parser(
            head=head_pattern, body=body_pattern, tail=tail_pattern
        )

        with open(file_path) as f:
            data = f.read()

        m = re.search(freq_parser.pattern(), data)
        self.assertIsNotNone(m)
        self.assertEqual(m.group(0).count("\n"), 22)

        self.assertEqual(
            freq_parser.capture_struct(data)[ParserField.Head], [["18"]]
        )
        self.assertEqual(
            freq_parser.capture_struct(data)[ParserField.Tail], [["18", "18"]]
        )

        self.assertEqual(freq_parser.capture_body(data), orca_hess_freqs)

    def test_orca_hess_dipders_parser(self):
        """Confirm 2-D single-block data parser for ORCA dipders works."""
        import pent

        from .testdata import orca_hess_dipders

        head_pattern = ("@.$dipole_derivatives", "#.+i")
        body_pattern = "#!+.f"

        file_path = str(testdir_path / "C2F4_01.hess")

        freq_parser = pent.Parser(head=head_pattern, body=body_pattern)

        with open(file_path) as f:
            data = f.read()

        self.assertEqual(freq_parser.capture_body(data), orca_hess_dipders)

    def test_ORCA_CAS_orbital_ranges(self):
        """Confirm inactive/active/virtual data captures correctly."""
        import pent

        data = self.get_orca_cas_file()

        prs = pent.Parser(
            head="~ '@.orbital ranges:'",
            body="~ #!.+i @.- #!.+i @.( #!.+i @.orbitals)",
            tail="'@.Number of rotation parameters' @+. #!.+i",
        )

        tail_val = [["1799"]]
        body_result = [
            [["0", "14", "15"], ["15", "21", "7"], ["22", "98", "77"]]
        ]

        self.assertEqual(body_result, prs.capture_body(data))
        self.assertEqual(tail_val, prs.capture_struct(data)[ParserField.Tail])

    def test_ORCA_CAS_CI_setup(self):
        """Confirm capture of CI block config data."""
        import pent

        data = self.get_orca_cas_file()

        prs_inner = pent.Parser(
            head=(
                "@.BLOCK #!.+i @.WEIGHT= #!..f",
                "@.Multiplicity @+. #!.+i",
                "@x.#(Config ~ @+. #!.+i",
                "@.#(CSFs) @+. #!.+i",
                "@.#(Roots) @+. #!.+i",
            ),
            body="@x.ROOT= #o.+i @.WEIGHT= #!..f",
            tail="",
        )

        prs_outer = pent.Parser(
            head=("@.CI-STEP:", "~ '@.multiplicity blocks' @+. #!.+i"),
            body=prs_inner,
        )

        with self.subTest("head_outer"):
            head_result = prs_outer.capture_struct(data)[ParserField.Head]
            self.assertEqual([["3"]], head_result)

        with self.subTest("head_inner"):
            head_inner_result = []
            for bdict in prs_outer.capture_struct(data)[ParserField.Body]:
                head_inner_result.append(bdict[ParserField.Head])

            head_inner_expect = [
                [["1", "0.0000", "6", "43", "48", "4"]],
                [["2", "0.0000", "4", "253", "392", "4"]],
                [["3", "1.0000", "2", "393", "784", "4"]],
            ]

            self.assertEqual(head_inner_result, head_inner_expect)

        with self.subTest("body_inner"):
            body_inner_result = []
            for bdict in prs_outer.capture_struct(data)[ParserField.Body]:
                body_inner_result.append(bdict[ParserField.Body])

            body_inner_expect = [
                [["0.000000"], ["0.000000"], ["0.000000"], ["0.000000"]],
                [["0.000000"], ["0.000000"], ["0.000000"], ["0.000000"]],
                [["1.000000"], ["0.000000"], ["0.000000"], ["0.000000"]],
            ]

            self.assertEqual(body_inner_result, body_inner_expect)

        with self.subTest("body_block"):
            body_result = prs_outer.capture_body(data)
            body_expect = [
                [
                    [["0.000000"], ["0.000000"], ["0.000000"], ["0.000000"]],
                    [["0.000000"], ["0.000000"], ["0.000000"], ["0.000000"]],
                    [["1.000000"], ["0.000000"], ["0.000000"], ["0.000000"]],
                ]
            ]

            self.assertEqual(body_result, body_expect)

    def test_ORCA_CAS_state_results(self):
        """Confirm parse of CAS state results is correct."""
        import pent

        from .testdata import orca_cas_states

        data = self.get_orca_cas_file()
        head_expect = [[["1", "6", "4"]], [["2", "4", "4"]], [["3", "2", "4"]]]

        prs_in = pent.Parser(
            head="@.ROOT #x!.+i @.: @.E= #o!..f ~!",
            body="#!.+f @o.[ #x!.+i @.]: #!.+i",
        )

        prs_out = pent.Parser(
            head=(
                "@+-",
                "~ '@.FOR BLOCK' #!.+i @o.MULT= #!.+i @o.NROOTS= #!.+i",
                "@+-",
                "",
            ),
            body=prs_in,
            tail=("", ""),
        )

        self.assertEqual(prs_out.capture_body(data), orca_cas_states)

        head_result = []
        for bdict in prs_out.capture_struct(data):
            head_result.append(bdict[ParserField.Head])

        self.assertEqual(head_result, head_expect)

    def test_ORCA_opt_progress_results(self):
        """Confirm parse of optimization results block."""
        import pent

        data = self.get_orca_opt_file()

        from .testdata import orca_opt_status

        prs = pent.Parser(
            head=(  # body=(
                "@x+- '@x.|Geometry convergence|' @+-",
                "@.Item @.value @.Tolerance @.Converged",
                "@+-",
            ),
            body="~ #!..f #..f ~!",
            tail=(
                "@+.",
                "@.Max(Bonds) #!.+f @.Max(Angles) #!.+f",
                "@.Max(Dihed) #!.+f @.Max(Improp) #!.+f",
                "@+-",
            ),
        )

        self.assertEqual(prs.capture_body(data), orca_opt_status)

    def test_orca_opt_trajectory(self):
        """Confirm multiple-xyz .trj file parsing."""
        import pent

        from .testdata import orca_opt_trajectory

        prs = pent.Parser(head=("#..i", "~"), body="&!. #!+.f")

        data = self.get_orca_trj()

        res = prs.capture_body(data)

        self.assertEqual(res, orca_opt_trajectory)

    @ut.expectedFailure
    def test_ORCA_opt_progress_results_optline(self):
        """Confirm parse of optimization results block using optline."""
        import pent

        data = self.get_orca_opt_file()

        from .testdata import orca_opt_status

        prs = pent.Parser(
            body=(
                "@x+- '@x.|Geometry convergence|' @+-",
                "@.Item @.value @.Tolerance @.Converged",
                "@+-",
                "? '@.Energy change' #!..f #..f ~!",
                "'@.RMS gradient' #!..f #.+f ~!",
                "'@.MAX gradient' #!..f #.+f ~!",
                "'@.RMS step' #!..f #.+f ~!",
                "'@.MAX step' #!..f #.+f ~!",
                "@+.",
                "@.Max(Bonds) #!.+f @.Max(Angles) #!.+f",
                "@.Max(Dihed) #!.+f @.Max(Improp) #!.+f",
                "@+-",
            )
        )

        self.assertEqual(prs.capture_body(data), orca_opt_status)


def suite_live_orca():
    """Create and return the test suite for ORCA tests."""
    s = ut.TestSuite()
    tl = ut.TestLoader()
    s.addTests([tl.loadTestsFromTestCase(TestPentORCALiveData)])
    return s


if __name__ == "__main__":
    print("Module not executable.")
