r"""*Test objects for* ``pent`` *test suite*.

``pent`` Extracts Numerical Text.

**Author**
    Brian Skinn (bskinn@alum.mit.edu)

**File Created**
    3 Sep 2018

**Copyright**
    \(c) Brian Skinn 2018

**Source Repository**
    http://www.github.com/bskinn/pent

**Documentation**
    http://pent.readthedocs.io

**License**
    The MIT License; see |license_txt|_ for full license terms

**Members**

*(none documented)*

"""


import itertools as itt
import re
import unittest as ut


class SuperPent:
    """Superclass of various test classes, with common methods."""

    @staticmethod
    def does_parse_match(re_pat, s):
        """Run an individual parse test on `s` using regex pattern `re_pat`."""
        m = re.search(re_pat, s)

        return m is not None

    @staticmethod
    def make_testname(v, n, s):
        """Compose test name from a numerical value and pattern Number/Sign."""
        return "{0}_{1}_{2}".format(v, n, s)


class TestPentCorePatterns(ut.TestCase, SuperPent):
    """Confirming basic pattern matching of the core regex patterns."""

    def test_number_and_sign_matching(self):
        """Confirm number and sign patterns match the right string patterns."""
        import pent

        from .testdata import number_sign_vals as vals

        for (v, n, s) in itt.product(vals, pent.Number, pent.Sign):
            with self.subTest(self.make_testname(v, n, s)):
                npat = pent.number_patterns[(n, s)]
                npat = pent.std_wordify(npat)

                res = self.does_parse_match(npat, v)

                self.assertEqual(vals[v][(n, s)], res, msg=npat)

    def test_raw_single_value_space_delimited(self):
        """Confirm single-value parsing from a line works with raw patterns."""
        import pent

        from .testdata import number_sign_vals as vals

        test_line = "This line contains the value {} with space delimit."

        for v in vals:
            test_str = test_line.format(v)

            for (n, s) in itt.product(pent.Number, pent.Sign):
                with self.subTest(self.make_testname(v, n, s)):
                    npat = pent.number_patterns[(n, s)]
                    npat = pent.std_wordify(npat)

                    res = self.does_parse_match(npat, test_str)

                    self.assertEqual(vals[v][(n, s)], res, msg=test_str)


class TestPentParserPatterns(ut.TestCase, SuperPent):
    """Confirming pattern matching of patterns generated by the Parser."""

    import pent

    prs = pent.Parser()

    def test_parser_single_line_space_delim(self):
        """Confirm parser works on single lines with space-delimited values.

        Also tests the 'suppress' number mode.

        """
        import pent

        from .testdata import number_sign_vals as vals

        test_line = "This line contains the value {} with space delimit."
        test_pat_template = "~ !contains ~ #{0}{1} ~"

        for v in vals:
            test_str = test_line.format(v)

            for (n, s) in itt.product(pent.Number, pent.Sign):
                test_pat = test_pat_template.format(s.value, n.value)

                with self.subTest(self.make_testname(v, n, s)):
                    npat = self.prs.convert_line(test_pat)

                    res = self.does_parse_match(npat, test_str)

                    self.assertEqual(vals[v][n, s], res, msg=test_str)

    def test_string_capture(self):
        """Confirm string capture works when desired; is ignored when not."""
        import pent

        test_line = "This is a string with a word and [symbol] in it."
        test_pat_capture = "~ =word ~"
        test_pat_ignore = "~ !word ~"
        test_pat_symbol = "~ =[symbol] ~"

        with self.subTest("capture"):
            pat = self.prs.convert_line(test_pat_capture)
            m = re.search(pat, test_line)
            self.assertIsNotNone(m)
            self.assertEqual(m.group(pent.group_prefix + "1"), "word")

        with self.subTest("ignore"):
            pat = self.prs.convert_line(test_pat_ignore)
            m = re.search(pat, test_line)
            self.assertIsNotNone(m)
            self.assertRaises(IndexError, m.group, pent.group_prefix + "1")

        with self.subTest("symbol"):
            pat = self.prs.convert_line(test_pat_symbol)
            m = re.search(pat, test_line)
            self.assertIsNotNone(m)
            self.assertEqual(m.group(pent.group_prefix + "1"), "[symbol]")

    def test_single_num_capture(self):
        """Confirm single-number capture works."""
        import pent

        from .testdata import number_sign_vals as vals

        test_line = "This is a string with {} in it."
        test_pat_template = "~ .{0}{1} ~"

        for v in vals:
            test_str = test_line.format(v)

            for (n, s) in itt.product(pent.Number, pent.Sign):
                test_pat = test_pat_template.format(s.value, n.value)

                with self.subTest(self.make_testname(v, n, s)):
                    npat = self.prs.convert_line(test_pat)

                    m = re.search(npat, test_str)

                    self.assertEqual(
                        vals[v][n, s], m is not None, msg=test_str
                    )

                    if m is not None:
                        self.assertEqual(m.group(pent.group_prefix + "1"), v)

    def test_single_nums_no_space(self):
        """Confirm two-number capture works, with no intervening space.

        Not a particularly real-world test-case, but it probes the
        no-space-before check.

        """
        import pent

        from .testdata import number_sign_vals as vals

        test_str = "This is a string with 123-456 in it."
        test_pat = "~ ..i #-ix ~"

        npat = self.prs.convert_line(test_pat)

        m = re.search(npat, test_str)

        self.assertIsNotNone(m)
        self.assertEqual(m.group(pent.group_prefix + "1"), "123")
        self.assertEqual(m.group(pent.group_prefix + "2"), "-456")

    @ut.skip("Implementing no-space-preceding first")
    def test_single_num_preceding_colon_capture(self):
        """Confirm single-number capture works, with preceding colon."""
        import pent

        from .testdata import number_sign_vals as vals

        test_line = "This is a string with :{} in it, after a colon."
        test_pat_template = "~ .{0}{1} ~"

        for v in vals:
            test_str = test_line.format(v)

            for (n, s) in itt.product(pent.Number, pent.Sign):
                test_pat = test_pat_template.format(s.value, n.value)

                with self.subTest(self.make_testname(v, n, s)):
                    npat = self.prs.convert_line(test_pat)

                    m = re.search(npat, test_str)

                    self.assertEqual(
                        vals[v][n, s], m is not None, msg=test_str
                    )

                    if m is not None:
                        self.assertEqual(m.group(pent.group_prefix + "1"), v)

    def test_string_and_single_num_capture(self):
        """Confirm multiple capture of string and single number."""
        import pent

        from .testdata import number_sign_vals as vals

        test_line = "This is a string with {} in it."
        test_pat_template = "~ =string ~ .{0}{1} ~"

        for v in vals:
            test_str = test_line.format(v)

            for (n, s) in itt.product(pent.Number, pent.Sign):
                test_pat = test_pat_template.format(s.value, n.value)

                with self.subTest(self.make_testname(v, n, s)):
                    npat = self.prs.convert_line(test_pat)

                    m = re.search(npat, test_str)

                    self.assertEqual(
                        vals[v][n, s], m is not None, msg=test_str
                    )

                    if m is not None:
                        self.assertEqual(
                            m.group(pent.group_prefix + "1"), "string"
                        )
                        self.assertEqual(m.group(pent.group_prefix + "2"), v)

    def test_match_entire_line(self):
        """Confirm the tilde works to match an entire line."""
        test_line = "This is a line with whatever weird (*#$(*&23646{}}{#$"
        test_pat = "~"

        pat = self.prs.convert_line(test_pat)
        self.assertTrue(self.does_parse_match(pat, test_line))


def suite_expect_good():
    """Create and return the test suite for expect-good tests."""
    s = ut.TestSuite()
    tl = ut.TestLoader()
    s.addTests(
        [
            tl.loadTestsFromTestCase(TestPentCorePatterns),
            tl.loadTestsFromTestCase(TestPentParserPatterns),
        ]
    )
    return s


if __name__ == "__main__":
    print("Module not executable.")
